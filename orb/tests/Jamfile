# (c) Copyright 2012,2013 Felipe Magno de Almeida
#
# Distributed under the Boost Software License, Version 1.0. (See
# accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

import testing ;
import os ;

project morbid/tests ;

path-constant current : . ;
path-constant install : ../../install ;

actions donothing
{
}
actions compileidl
{
  $(install:G=)/morbid_idl -i $(>) -o $(<:S=)
}
if [ option.get test-with-openbus : : 1 ]
{
  local scs-idl-path-env = [ os.environ SCS_IDL_PATH ] ;
  path-constant scs-idl-path : $(scs-idl-path-env) ;

  actions compileidl-openbus
  {
    $(install:G=)/morbid_idl -i $(>) -o $(<:S=) -I $(scs-idl-path)
  }
}

actions run-server-client
{
  $(>[2]) $(>[2]).ior &> $(<).server &
  server_pid=$!
  sleep 1
  $(>[1]) $(>[2]).ior &> $(<).client
  if [ "$?" -eq 0 ]
  then
    wait $server_pid
  else
    kill -s KILL $server_pid
    exit 1
  fi
}

make allprimitives.hpp : allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe allprimitives_client
 : allprimitives_client.cpp /morbid//morbid
  : <implicit-dependency>allprimitives.hpp
 ;
exe allprimitives_server
 : allprimitives_server.cpp /morbid//morbid
  : <implicit-dependency>allprimitives.hpp
 ;

make allprimitives.output : allprimitives_client allprimitives_server : @run-server-client ;

make out_allprimitives.hpp : out_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe out_allprimitives_client
 : out_allprimitives_client.cpp /morbid//morbid
 : <implicit-dependency>out_allprimitives.hpp
 ;
exe out_allprimitives_server
 : out_allprimitives_server.cpp /morbid//morbid
 : <implicit-dependency>out_allprimitives.hpp
 ;

make out_allprimitives.output : out_allprimitives_client out_allprimitives_server : @run-server-client ;

make inout_allprimitives.hpp : inout_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe inout_allprimitives_client
 : inout_allprimitives_client.cpp /morbid//morbid
 : <implicit-dependency>inout_allprimitives.hpp
 ;
exe inout_allprimitives_server
 : inout_allprimitives_server.cpp /morbid//morbid
 : <implicit-dependency>inout_allprimitives.hpp
 ;

make inout_allprimitives.output : inout_allprimitives_client inout_allprimitives_server : @run-server-client ;

make return_allprimitives.hpp : return_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe return_allprimitives_client
 : return_allprimitives_client.cpp /morbid//morbid
 : <implicit-dependency>return_allprimitives.hpp
 ;
exe return_allprimitives_server
 : return_allprimitives_server.cpp /morbid//morbid
 : <implicit-dependency>return_allprimitives.hpp
 ;

make return_allprimitives.output : return_allprimitives_client return_allprimitives_server : @run-server-client ;

make modules_allprimitives.hpp : modules_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe modules_allprimitives_client
 : modules_allprimitives_client.cpp /morbid//morbid
 : <implicit-dependency>modules_allprimitives.hpp
 ;
exe modules_allprimitives_server
 : modules_allprimitives_server.cpp /morbid//morbid
 : <implicit-dependency>modules_allprimitives.hpp
 ;

make modules_allprimitives.output : modules_allprimitives_client modules_allprimitives_server : @run-server-client ;

make struct.hpp : struct.idl : @compileidl : <dependency>/morbid//install-idl ;

exe struct_client
 : struct_client.cpp /morbid//morbid
 : <implicit-dependency>struct.hpp
 ;
exe struct_server
 : struct_server.cpp /morbid//morbid
 : <implicit-dependency>struct.hpp
 ;

make struct.output : struct_client struct_server : @run-server-client ;

make reference.hpp : reference.idl : @compileidl : <dependency>/morbid//install-idl ;

exe reference_client
 : reference_client.cpp /morbid//morbid
 : <implicit-dependency>reference.hpp
 ;
exe reference_server
 : reference_server.cpp /morbid//morbid
 : <implicit-dependency>reference.hpp
 ;

make reference.output : reference_client reference_server : @run-server-client ;

make fwd_ref.hpp : fwd_ref.idl : @compileidl : <dependency>/morbid//install-idl ;

exe fwd_ref_client
 : fwd_ref_client.cpp /morbid//morbid
 : <implicit-dependency>fwd_ref.hpp
 ;
exe fwd_ref_server
 : fwd_ref_server.cpp /morbid//morbid
 : <implicit-dependency>fwd_ref.hpp
 ;

make fwd_ref.output : fwd_ref_client fwd_ref_server : @run-server-client ;

make seq_allprimitives.hpp : seq_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe seq_allprimitives_client
 : seq_allprimitives_client.cpp /morbid//morbid
  : <implicit-dependency>seq_allprimitives.hpp
 ;
exe seq_allprimitives_server
 : seq_allprimitives_server.cpp /morbid//morbid
  : <implicit-dependency>seq_allprimitives.hpp
 ;

make seq_allprimitives.output : seq_allprimitives_client seq_allprimitives_server : @run-server-client ;

make seq_args_allprimitives.hpp : seq_args_allprimitives.idl : @compileidl : <dependency>/morbid//install-idl ;

exe seq_args_allprimitives_client
 : seq_args_allprimitives_client.cpp /morbid//morbid
  : <implicit-dependency>seq_args_allprimitives.hpp
 ;
exe seq_args_allprimitives_server
 : seq_args_allprimitives_server.cpp /morbid//morbid
  : <implicit-dependency>seq_args_allprimitives.hpp
 ;

make seq_args_allprimitives.output : seq_args_allprimitives_client seq_args_allprimitives_server : @run-server-client ;

make inheritance.hpp : inheritance.idl : @compileidl : <dependency>/morbid//install-idl ;

exe inheritance_client
 : inheritance_client.cpp /morbid//morbid
 : <implicit-dependency>inheritance.hpp
 ;
exe inheritance_server
 : inheritance_server.cpp /morbid//morbid
 : <implicit-dependency>inheritance.hpp
 ;

make inheritance.output : inheritance_client inheritance_server : @run-server-client ;

alias allprimitives : allprimitives.output ;
alias out_allprimitives : out_allprimitives.output ;
alias inout_allprimitives : inout_allprimitives.output ;
alias return_allprimitives : return_allprimitives.output ;
alias modules_allprimitives : modules_allprimitives.output ;
alias struct : struct.output ;
alias reference : reference.output ;
alias inheritance : inheritance.output ;
alias fwd_ref : fwd_ref.output ;
alias seq_allprimitives : seq_allprimitives.output ;
alias seq_args_allprimitives : seq_args_allprimitives.output ;

if [ option.get test-with-openbus : : 1 ]
{
  import feature ;
  feature.feature morbid-openbus : off on : composite link-incompatible ;
  feature.compose <morbid-openbus>on : <define>MORBID_OPENBUS ;

  local openbus-idl-path-env = [ os.environ OPENBUS_IDL_PATH ] ;
  path-constant openbus-idl-path : $(openbus-idl-path-env) ;

  make access_control.hpp : $(openbus-idl-path)/access_control.idl : @compileidl-openbus : <dependency>/morbid//install-idl ;
  make offer_registry.hpp : $(openbus-idl-path)/offer_registry.idl : @compileidl-openbus : <dependency>/morbid//install-idl ;
  alias openbus : [ testing.run openbus_client.cpp /openssl//openssl /morbid//morbid/<morbid-openbus>on : : : <implicit-dependency>access_control.hpp <implicit-dependency>offer_registry.hpp <morbid-openbus>on ] ;

  alias morbid-tests : allprimitives out_allprimitives inout_allprimitives
   return_allprimitives modules_allprimitives struct reference fwd_ref seq_allprimitives
   seq_args_allprimitives inheritance
   openbus
  ;
}
else
{
  alias morbid-tests : allprimitives out_allprimitives inout_allprimitives
   return_allprimitives modules_allprimitives struct reference fwd_ref seq_allprimitives
   seq_args_allprimitives inheritance
   ;
}

alias interop-tests : interop//interops ;
alias tests : morbid-tests interop-tests ;
